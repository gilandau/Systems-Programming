// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: replication_packet.proto

#ifndef PROTOBUF_INCLUDED_replication_5fpacket_2eproto
#define PROTOBUF_INCLUDED_replication_5fpacket_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_replication_5fpacket_2eproto 

namespace protobuf_replication_5fpacket_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_replication_5fpacket_2eproto
class RepPacket;
class RepPacketDefaultTypeInternal;
extern RepPacketDefaultTypeInternal _RepPacket_default_instance_;
namespace google {
namespace protobuf {
template<> ::RepPacket* Arena::CreateMaybeMessage<::RepPacket>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class RepPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RepPacket) */ {
 public:
  RepPacket();
  virtual ~RepPacket();

  RepPacket(const RepPacket& from);

  inline RepPacket& operator=(const RepPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RepPacket(RepPacket&& from) noexcept
    : RepPacket() {
    *this = ::std::move(from);
  }

  inline RepPacket& operator=(RepPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RepPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RepPacket* internal_default_instance() {
    return reinterpret_cast<const RepPacket*>(
               &_RepPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RepPacket* other);
  friend void swap(RepPacket& a, RepPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RepPacket* New() const final {
    return CreateMaybeMessage<RepPacket>(NULL);
  }

  RepPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RepPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RepPacket& from);
  void MergeFrom(const RepPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RepPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string command = 1 [default = ""];
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  #if LANG_CXX11
  void set_command(::std::string&& value);
  #endif
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // optional string request = 2 [default = ""];
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 2;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // optional string row = 3 [default = ""];
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 3;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const char* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // optional string column = 4 [default = ""];
  bool has_column() const;
  void clear_column();
  static const int kColumnFieldNumber = 4;
  const ::std::string& column() const;
  void set_column(const ::std::string& value);
  #if LANG_CXX11
  void set_column(::std::string&& value);
  #endif
  void set_column(const char* value);
  void set_column(const char* value, size_t size);
  ::std::string* mutable_column();
  ::std::string* release_column();
  void set_allocated_column(::std::string* column);

  // optional string data = 5 [default = ""];
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string data_to_compare = 6 [default = ""];
  bool has_data_to_compare() const;
  void clear_data_to_compare();
  static const int kDataToCompareFieldNumber = 6;
  const ::std::string& data_to_compare() const;
  void set_data_to_compare(const ::std::string& value);
  #if LANG_CXX11
  void set_data_to_compare(::std::string&& value);
  #endif
  void set_data_to_compare(const char* value);
  void set_data_to_compare(const char* value, size_t size);
  ::std::string* mutable_data_to_compare();
  ::std::string* release_data_to_compare();
  void set_allocated_data_to_compare(::std::string* data_to_compare);

  // optional string msgid = 7 [default = ""];
  bool has_msgid() const;
  void clear_msgid();
  static const int kMsgidFieldNumber = 7;
  const ::std::string& msgid() const;
  void set_msgid(const ::std::string& value);
  #if LANG_CXX11
  void set_msgid(::std::string&& value);
  #endif
  void set_msgid(const char* value);
  void set_msgid(const char* value, size_t size);
  ::std::string* mutable_msgid();
  ::std::string* release_msgid();
  void set_allocated_msgid(::std::string* msgid);

  // optional string sender = 12 [default = ""];
  bool has_sender() const;
  void clear_sender();
  static const int kSenderFieldNumber = 12;
  const ::std::string& sender() const;
  void set_sender(const ::std::string& value);
  #if LANG_CXX11
  void set_sender(::std::string&& value);
  #endif
  void set_sender(const char* value);
  void set_sender(const char* value, size_t size);
  ::std::string* mutable_sender();
  ::std::string* release_sender();
  void set_allocated_sender(::std::string* sender);

  // optional int32 proposed_number = 8 [default = 0];
  bool has_proposed_number() const;
  void clear_proposed_number();
  static const int kProposedNumberFieldNumber = 8;
  ::google::protobuf::int32 proposed_number() const;
  void set_proposed_number(::google::protobuf::int32 value);

  // optional int32 version_number = 9 [default = 0];
  bool has_version_number() const;
  void clear_version_number();
  static const int kVersionNumberFieldNumber = 9;
  ::google::protobuf::int32 version_number() const;
  void set_version_number(::google::protobuf::int32 value);

  // optional int32 deliverable = 10 [default = 0];
  bool has_deliverable() const;
  void clear_deliverable();
  static const int kDeliverableFieldNumber = 10;
  ::google::protobuf::int32 deliverable() const;
  void set_deliverable(::google::protobuf::int32 value);

  // optional int32 senderid = 11 [default = 0];
  bool has_senderid() const;
  void clear_senderid();
  static const int kSenderidFieldNumber = 11;
  ::google::protobuf::int32 senderid() const;
  void set_senderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RepPacket)
 private:
  void set_has_command();
  void clear_has_command();
  void set_has_request();
  void clear_has_request();
  void set_has_row();
  void clear_has_row();
  void set_has_column();
  void clear_has_column();
  void set_has_data();
  void clear_has_data();
  void set_has_data_to_compare();
  void clear_has_data_to_compare();
  void set_has_msgid();
  void clear_has_msgid();
  void set_has_proposed_number();
  void clear_has_proposed_number();
  void set_has_version_number();
  void clear_has_version_number();
  void set_has_deliverable();
  void clear_has_deliverable();
  void set_has_senderid();
  void clear_has_senderid();
  void set_has_sender();
  void clear_has_sender();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr column_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr data_to_compare_;
  ::google::protobuf::internal::ArenaStringPtr msgid_;
  ::google::protobuf::internal::ArenaStringPtr sender_;
  ::google::protobuf::int32 proposed_number_;
  ::google::protobuf::int32 version_number_;
  ::google::protobuf::int32 deliverable_;
  ::google::protobuf::int32 senderid_;
  friend struct ::protobuf_replication_5fpacket_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RepPacket

// optional string command = 1 [default = ""];
inline bool RepPacket::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RepPacket::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RepPacket::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RepPacket::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& RepPacket::command() const {
  // @@protoc_insertion_point(field_get:RepPacket.command)
  return command_.GetNoArena();
}
inline void RepPacket::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.command)
}
#if LANG_CXX11
inline void RepPacket::set_command(::std::string&& value) {
  set_has_command();
  command_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.command)
}
#endif
inline void RepPacket::set_command(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.command)
}
inline void RepPacket::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.command)
}
inline ::std::string* RepPacket::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:RepPacket.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_command() {
  // @@protoc_insertion_point(field_release:RepPacket.command)
  if (!has_command()) {
    return NULL;
  }
  clear_has_command();
  return command_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.command)
}

// optional string request = 2 [default = ""];
inline bool RepPacket::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RepPacket::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RepPacket::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RepPacket::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_request();
}
inline const ::std::string& RepPacket::request() const {
  // @@protoc_insertion_point(field_get:RepPacket.request)
  return request_.GetNoArena();
}
inline void RepPacket::set_request(const ::std::string& value) {
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.request)
}
#if LANG_CXX11
inline void RepPacket::set_request(::std::string&& value) {
  set_has_request();
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.request)
}
#endif
inline void RepPacket::set_request(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.request)
}
inline void RepPacket::set_request(const char* value, size_t size) {
  set_has_request();
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.request)
}
inline ::std::string* RepPacket::mutable_request() {
  set_has_request();
  // @@protoc_insertion_point(field_mutable:RepPacket.request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_request() {
  // @@protoc_insertion_point(field_release:RepPacket.request)
  if (!has_request()) {
    return NULL;
  }
  clear_has_request();
  return request_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_request(::std::string* request) {
  if (request != NULL) {
    set_has_request();
  } else {
    clear_has_request();
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.request)
}

// optional string row = 3 [default = ""];
inline bool RepPacket::has_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RepPacket::set_has_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RepPacket::clear_has_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RepPacket::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_row();
}
inline const ::std::string& RepPacket::row() const {
  // @@protoc_insertion_point(field_get:RepPacket.row)
  return row_.GetNoArena();
}
inline void RepPacket::set_row(const ::std::string& value) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.row)
}
#if LANG_CXX11
inline void RepPacket::set_row(::std::string&& value) {
  set_has_row();
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.row)
}
#endif
inline void RepPacket::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.row)
}
inline void RepPacket::set_row(const char* value, size_t size) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.row)
}
inline ::std::string* RepPacket::mutable_row() {
  set_has_row();
  // @@protoc_insertion_point(field_mutable:RepPacket.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_row() {
  // @@protoc_insertion_point(field_release:RepPacket.row)
  if (!has_row()) {
    return NULL;
  }
  clear_has_row();
  return row_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    set_has_row();
  } else {
    clear_has_row();
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.row)
}

// optional string column = 4 [default = ""];
inline bool RepPacket::has_column() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RepPacket::set_has_column() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RepPacket::clear_has_column() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RepPacket::clear_column() {
  column_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_column();
}
inline const ::std::string& RepPacket::column() const {
  // @@protoc_insertion_point(field_get:RepPacket.column)
  return column_.GetNoArena();
}
inline void RepPacket::set_column(const ::std::string& value) {
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.column)
}
#if LANG_CXX11
inline void RepPacket::set_column(::std::string&& value) {
  set_has_column();
  column_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.column)
}
#endif
inline void RepPacket::set_column(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.column)
}
inline void RepPacket::set_column(const char* value, size_t size) {
  set_has_column();
  column_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.column)
}
inline ::std::string* RepPacket::mutable_column() {
  set_has_column();
  // @@protoc_insertion_point(field_mutable:RepPacket.column)
  return column_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_column() {
  // @@protoc_insertion_point(field_release:RepPacket.column)
  if (!has_column()) {
    return NULL;
  }
  clear_has_column();
  return column_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_column(::std::string* column) {
  if (column != NULL) {
    set_has_column();
  } else {
    clear_has_column();
  }
  column_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), column);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.column)
}

// optional string data = 5 [default = ""];
inline bool RepPacket::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RepPacket::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RepPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RepPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& RepPacket::data() const {
  // @@protoc_insertion_point(field_get:RepPacket.data)
  return data_.GetNoArena();
}
inline void RepPacket::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.data)
}
#if LANG_CXX11
inline void RepPacket::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.data)
}
#endif
inline void RepPacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.data)
}
inline void RepPacket::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.data)
}
inline ::std::string* RepPacket::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:RepPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_data() {
  // @@protoc_insertion_point(field_release:RepPacket.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.data)
}

// optional string data_to_compare = 6 [default = ""];
inline bool RepPacket::has_data_to_compare() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RepPacket::set_has_data_to_compare() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RepPacket::clear_has_data_to_compare() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RepPacket::clear_data_to_compare() {
  data_to_compare_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_to_compare();
}
inline const ::std::string& RepPacket::data_to_compare() const {
  // @@protoc_insertion_point(field_get:RepPacket.data_to_compare)
  return data_to_compare_.GetNoArena();
}
inline void RepPacket::set_data_to_compare(const ::std::string& value) {
  set_has_data_to_compare();
  data_to_compare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.data_to_compare)
}
#if LANG_CXX11
inline void RepPacket::set_data_to_compare(::std::string&& value) {
  set_has_data_to_compare();
  data_to_compare_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.data_to_compare)
}
#endif
inline void RepPacket::set_data_to_compare(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data_to_compare();
  data_to_compare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.data_to_compare)
}
inline void RepPacket::set_data_to_compare(const char* value, size_t size) {
  set_has_data_to_compare();
  data_to_compare_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.data_to_compare)
}
inline ::std::string* RepPacket::mutable_data_to_compare() {
  set_has_data_to_compare();
  // @@protoc_insertion_point(field_mutable:RepPacket.data_to_compare)
  return data_to_compare_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_data_to_compare() {
  // @@protoc_insertion_point(field_release:RepPacket.data_to_compare)
  if (!has_data_to_compare()) {
    return NULL;
  }
  clear_has_data_to_compare();
  return data_to_compare_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_data_to_compare(::std::string* data_to_compare) {
  if (data_to_compare != NULL) {
    set_has_data_to_compare();
  } else {
    clear_has_data_to_compare();
  }
  data_to_compare_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_to_compare);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.data_to_compare)
}

// optional string msgid = 7 [default = ""];
inline bool RepPacket::has_msgid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RepPacket::set_has_msgid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RepPacket::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RepPacket::clear_msgid() {
  msgid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msgid();
}
inline const ::std::string& RepPacket::msgid() const {
  // @@protoc_insertion_point(field_get:RepPacket.msgid)
  return msgid_.GetNoArena();
}
inline void RepPacket::set_msgid(const ::std::string& value) {
  set_has_msgid();
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.msgid)
}
#if LANG_CXX11
inline void RepPacket::set_msgid(::std::string&& value) {
  set_has_msgid();
  msgid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.msgid)
}
#endif
inline void RepPacket::set_msgid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msgid();
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.msgid)
}
inline void RepPacket::set_msgid(const char* value, size_t size) {
  set_has_msgid();
  msgid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.msgid)
}
inline ::std::string* RepPacket::mutable_msgid() {
  set_has_msgid();
  // @@protoc_insertion_point(field_mutable:RepPacket.msgid)
  return msgid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_msgid() {
  // @@protoc_insertion_point(field_release:RepPacket.msgid)
  if (!has_msgid()) {
    return NULL;
  }
  clear_has_msgid();
  return msgid_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_msgid(::std::string* msgid) {
  if (msgid != NULL) {
    set_has_msgid();
  } else {
    clear_has_msgid();
  }
  msgid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgid);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.msgid)
}

// optional int32 proposed_number = 8 [default = 0];
inline bool RepPacket::has_proposed_number() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RepPacket::set_has_proposed_number() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RepPacket::clear_has_proposed_number() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RepPacket::clear_proposed_number() {
  proposed_number_ = 0;
  clear_has_proposed_number();
}
inline ::google::protobuf::int32 RepPacket::proposed_number() const {
  // @@protoc_insertion_point(field_get:RepPacket.proposed_number)
  return proposed_number_;
}
inline void RepPacket::set_proposed_number(::google::protobuf::int32 value) {
  set_has_proposed_number();
  proposed_number_ = value;
  // @@protoc_insertion_point(field_set:RepPacket.proposed_number)
}

// optional int32 version_number = 9 [default = 0];
inline bool RepPacket::has_version_number() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RepPacket::set_has_version_number() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RepPacket::clear_has_version_number() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RepPacket::clear_version_number() {
  version_number_ = 0;
  clear_has_version_number();
}
inline ::google::protobuf::int32 RepPacket::version_number() const {
  // @@protoc_insertion_point(field_get:RepPacket.version_number)
  return version_number_;
}
inline void RepPacket::set_version_number(::google::protobuf::int32 value) {
  set_has_version_number();
  version_number_ = value;
  // @@protoc_insertion_point(field_set:RepPacket.version_number)
}

// optional int32 deliverable = 10 [default = 0];
inline bool RepPacket::has_deliverable() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RepPacket::set_has_deliverable() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RepPacket::clear_has_deliverable() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RepPacket::clear_deliverable() {
  deliverable_ = 0;
  clear_has_deliverable();
}
inline ::google::protobuf::int32 RepPacket::deliverable() const {
  // @@protoc_insertion_point(field_get:RepPacket.deliverable)
  return deliverable_;
}
inline void RepPacket::set_deliverable(::google::protobuf::int32 value) {
  set_has_deliverable();
  deliverable_ = value;
  // @@protoc_insertion_point(field_set:RepPacket.deliverable)
}

// optional int32 senderid = 11 [default = 0];
inline bool RepPacket::has_senderid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RepPacket::set_has_senderid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RepPacket::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RepPacket::clear_senderid() {
  senderid_ = 0;
  clear_has_senderid();
}
inline ::google::protobuf::int32 RepPacket::senderid() const {
  // @@protoc_insertion_point(field_get:RepPacket.senderid)
  return senderid_;
}
inline void RepPacket::set_senderid(::google::protobuf::int32 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:RepPacket.senderid)
}

// optional string sender = 12 [default = ""];
inline bool RepPacket::has_sender() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RepPacket::set_has_sender() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RepPacket::clear_has_sender() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RepPacket::clear_sender() {
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender();
}
inline const ::std::string& RepPacket::sender() const {
  // @@protoc_insertion_point(field_get:RepPacket.sender)
  return sender_.GetNoArena();
}
inline void RepPacket::set_sender(const ::std::string& value) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RepPacket.sender)
}
#if LANG_CXX11
inline void RepPacket::set_sender(::std::string&& value) {
  set_has_sender();
  sender_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RepPacket.sender)
}
#endif
inline void RepPacket::set_sender(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RepPacket.sender)
}
inline void RepPacket::set_sender(const char* value, size_t size) {
  set_has_sender();
  sender_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RepPacket.sender)
}
inline ::std::string* RepPacket::mutable_sender() {
  set_has_sender();
  // @@protoc_insertion_point(field_mutable:RepPacket.sender)
  return sender_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RepPacket::release_sender() {
  // @@protoc_insertion_point(field_release:RepPacket.sender)
  if (!has_sender()) {
    return NULL;
  }
  clear_has_sender();
  return sender_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RepPacket::set_allocated_sender(::std::string* sender) {
  if (sender != NULL) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  sender_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender);
  // @@protoc_insertion_point(field_set_allocated:RepPacket.sender)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_replication_5fpacket_2eproto
